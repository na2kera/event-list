// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  website     String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]
}

model Event {
  id             String          @id @default(cuid())
  title          String
  description    String?
  eventDate      DateTime
  startTime      String
  endTime        String?
  venue          String
  address        String?
  location       String?
  detailUrl      String?
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id])
  skills         EventSkill[]
  speakers       EventSpeaker[]
  categories     EventCategory[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([organizationId])
}

model EventSkill {
  id        String   @id @default(cuid())
  name      String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model Speaker {
  id          String         @id @default(cuid())
  name        String
  occupation  String // 職業
  affiliation String // 所属
  bio         String // 自己紹介
  events      EventSpeaker[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model EventSpeaker {
  id        String   @id @default(cuid())
  eventId   String
  speakerId String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  speaker   Speaker  @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
  @@index([speakerId])
}

model Category {
  id        String          @id @default(cuid())
  name      String         @unique
  events    EventCategory[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model EventCategory {
  id         String   @id @default(cuid())
  eventId    String
  categoryId String
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([eventId])
  @@index([categoryId])
}
